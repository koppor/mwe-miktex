name: MiKTeX (Windows)
on:
  push:
    paths:
      - '.github/workflows/miktex-windows.yml'
      - 'example-*.tex'
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Build matrix based on files
      id: set-matrix
      run: |
        FILES=$(ls example-*.tex | jq -R -s -c 'split("\n")[:-1]')
        echo "::set-output name=matrix::$FILES"

  miktex:
    needs: setup
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        filename: ${{fromJson(needs.setup.outputs.matrix)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install MiKTeX
        run: |
          choco install miktex --no-progress
          echo "C:\Program Files\MiKTeX\miktex\bin\x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
      - name: Configure MiKTeX
        run: |
          initexmf --admin --verbose --set-config-value=[MPM]AutoInstall=1
          miktex --admin --verbose packages update-package-database
          miktex --admin --verbose packages update
          miktex --verbose packages update
          miktex --admin --verbose packages install cm-super
          miktex --admin --verbose fndb refresh
          initexmf --admin --verbose --update-fndb
          initexmf --admin --verbose --mklinks --force
          updmap --admin
      - run: pdflatex ${{ matrix.filename }}
      - uses: actions/upload-artifact@v3
        with:
          name: PDFs-miktex-windows
          path: "*.pdf"
      - uses: actions/upload-artifact@v3
        if: ${{ !cancelled() }}
        with:
          name: logs-miktex-windows
          path: "*.log"
